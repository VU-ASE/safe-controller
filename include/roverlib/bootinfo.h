/**
 * stdout
 * This file has been autogenerated using quicktype https://github.com/quicktype/quicktype - DO NOT EDIT
 * This file depends of https://github.com/DaveGamble/cJSON, https://github.com/joelguittet/c-list and https://github.com/joelguittet/c-hashtable
 * To parse json data from json string use the following: struct <type> * data = cJSON_Parse<type>(<string>);
 * To get json data from cJSON object use the following: struct <type> * data = cJSON_Get<type>Value(<cjson>);
 * To get cJSON object from json data use the following: cJSON * cjson = cJSON_Create<type>(<data>);
 * To print json string from json data use the following: char * string = cJSON_Print<type>(<data>);
 * To delete json data use the following: cJSON_Delete<type>(<data>);
 */

#ifndef __STDOUT__
#define __STDOUT__

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>
#include <cJSON.h>
#include <hashtable.h>
#include <list.h>

#ifndef cJSON_Bool
#define cJSON_Bool (cJSON_True | cJSON_False)
#endif
#ifndef cJSON_Map
#define cJSON_Map (1 << 16)
#endif
#ifndef cJSON_Enum
#define cJSON_Enum (1 << 17)
#endif

/**
 * The type of this configuration option
 */
enum Type {
    TYPE_NUMBER,
    TYPE_STRING,
};

typedef enum Type Type;

/**
 * The value of this configuration option, which can be a string or float
 */
struct Value {
    int type;
    union {
        double number;
        char * string;
    } value;
};

typedef struct Value Value;

struct Configuration {
    /**
     * Unique name of this configuration option
     */
    char * name;
    /**
     * Whether or not this value can be tuned (ota)
     */
    bool * tunable;
    /**
     * The type of this configuration option
     */
    enum Type * type;
    /**
     * The value of this configuration option, which can be a string or float
     */
    struct Value * value;
};

typedef struct Configuration Configuration;

struct Stream {
    /**
     * The (zmq) socket address that input can be read on
     */
    char * address;
    /**
     * The name of the stream as outputted by the dependency service
     */
    char * name;
};

typedef struct Stream Stream;

struct Input {
    /**
     * The name of the service for this dependency
     */
    char * service;
    list_t * streams;
};

typedef struct Input Input;

struct Output {
    /**
     * The (zmq) socket address that output can be written to
     */
    char * address;
    /**
     * Name of the output published by this service
     */
    char * name;
};

typedef struct Output Output;

struct Tuning {
    /**
     * (If enabled) the (zmq) socket address that tuning data can be read from
     */
    char * address;
    /**
     * Whether or not live (ota) tuning is enabled
     */
    bool * enabled;
};

typedef struct Tuning Tuning;

/**
 * The object that injected into a rover process by roverd and then parsed by roverlib to be
 * made available for the user process
 */
struct Service {
    list_t * configuration;
    /**
     * The resolved input dependencies
     */
    list_t * inputs;
    /**
     * The name of the service (only lowercase letters and hyphens)
     */
    char * name;
    list_t * outputs;
    struct Tuning * tuning;
    /**
     * The specific version of the service
     */
    char * version;
    void * service;
};

typedef struct Service Service;

enum Type cJSON_GetTypeValue(const cJSON * j);
cJSON * cJSON_CreateType(const enum Type x);

struct Value * cJSON_GetValueValue(const cJSON * j);
cJSON * cJSON_CreateValue(const struct Value * x);
void cJSON_DeleteValue(struct Value * x);

struct Configuration * cJSON_ParseConfiguration(const char * s);
struct Configuration * cJSON_GetConfigurationValue(const cJSON * j);
cJSON * cJSON_CreateConfiguration(const struct Configuration * x);
char * cJSON_PrintConfiguration(const struct Configuration * x);
void cJSON_DeleteConfiguration(struct Configuration * x);

struct Stream * cJSON_ParseStream(const char * s);
struct Stream * cJSON_GetStreamValue(const cJSON * j);
cJSON * cJSON_CreateStream(const struct Stream * x);
char * cJSON_PrintStream(const struct Stream * x);
void cJSON_DeleteStream(struct Stream * x);

struct Input * cJSON_ParseInput(const char * s);
struct Input * cJSON_GetInputValue(const cJSON * j);
cJSON * cJSON_CreateInput(const struct Input * x);
char * cJSON_PrintInput(const struct Input * x);
void cJSON_DeleteInput(struct Input * x);

struct Output * cJSON_ParseOutput(const char * s);
struct Output * cJSON_GetOutputValue(const cJSON * j);
cJSON * cJSON_CreateOutput(const struct Output * x);
char * cJSON_PrintOutput(const struct Output * x);
void cJSON_DeleteOutput(struct Output * x);

struct Tuning * cJSON_ParseTuning(const char * s);
struct Tuning * cJSON_GetTuningValue(const cJSON * j);
cJSON * cJSON_CreateTuning(const struct Tuning * x);
char * cJSON_PrintTuning(const struct Tuning * x);
void cJSON_DeleteTuning(struct Tuning * x);

struct Service * cJSON_ParseService(const char * s);
struct Service * cJSON_GetServiceValue(const cJSON * j);
cJSON * cJSON_CreateService(const struct Service * x);
char * cJSON_PrintService(const struct Service * x);
void cJSON_DeleteService(struct Service * x);

#ifdef __cplusplus
}
#endif

#endif /* __STDOUT__ */
